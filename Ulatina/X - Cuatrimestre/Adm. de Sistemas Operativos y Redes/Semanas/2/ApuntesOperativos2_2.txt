Design Issues

Process Scheduling
en la figura 10 muestra el rendimiento de una procesador al momento de usar un algoritmo es importante 

puesto que mientras hayan menos procesador es importante planificar el algoritmo, mientras que con varios
procesador estos planificacion pierde relevancia. 

al hacer la planificacion esto tiene un costo 

    Planificacion de Hilo 

    Load Sharing
los procesos no estan asiganados a ningun procedador, sino que estan en una cola global 
Load Sharing se distigen del balanceo de cargas en que el trabajo se asigna de manera mas permanente   

la carga es distribuidad eventualmente 

no tiene un planificador central, pero si una cola centralizada 

la cola puede ser organizada y accesada usando un planificador 

desventajas 
se va a tener que bloquear la cola cuando un hilo accesa a la cola
los hilos detenidos es poco probable que cuando se retome con esos hilos sean en el mismo procesador de cuando inicio 


    planificacion Gang 
planificacion basada en grupos, como hablamos de hilos, planificar grupos de hilos 

coscheduling - planificar un gurpo de tareas llamadas fuerza de trabajo 


desventajas 
se esta desperdiciando cpus.....

Weighted scheduling - solo toma el peso de la cantidad de hilos, no toma la importancia de los hilos
Uniform scheduling - falla en que deperdicia cpus con procesos con pocos hilos 

    Asignaci√≥n de procesador dedicado
es lo contrario a load Sharing por que da los hilos de manera dedicada 

en sistema altamente paralelos....
entre mas se evite los cambios de contexto resulta en una mejora el rendimiento del programa 

limitar el numero de hilos activos a los numero de cpus en el sistema sino las aplicaciones se van a realentizar 
desvenjas 
colas muy largas con cores con mucho trabajo 
se puede desperdiciar recuros si un procesos se queda bloqueada 


    planificacion dinamica 
el numero de hilos puede ver afectada durante de la ejecucion 

podria haber hilos, cores etc como recursos dinamicos 



